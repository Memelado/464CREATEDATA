-- Procedure to add points to a customer's Clubcard based on the order total
DELIMITER //

CREATE PROCEDURE AddClubcardPoints(IN orderId INT)
BEGIN
    DECLARE customerId INT;
    DECLARE cardId INT;
    DECLARE orderTotal DECIMAL(10,2);
    DECLARE pointsToAdd INT;
    DECLARE currentPoints INT;

    -- Declare an exit handler for any unexpected SQL errors
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- If an error occurs, rollback the transaction
        ROLLBACK;
        -- Optionally, return an error message or take other actions
        SELECT 'An error occurred, transaction rolled back.' AS ErrorMessage;
    END;

    -- Start the transaction
    START TRANSACTION;

    -- Step 1: Get the order details
    SELECT `Customer_ID`, `Total_Amount` INTO customerId, orderTotal
    FROM `grocerystoredb`.`order`
    WHERE `Order_ID` = orderId;

    -- Step 2: Get the customer's Clubcard ID and current points balance
    SELECT `Card_ID`, `Points_Balance` INTO cardId, currentPoints
    FROM `grocerystoredb`.`clubcard`
    WHERE `Customer_ID` = customerId;

    -- Step 3: Calculate points to add based on the fixed policy (2 point per £1 spent)
    SET orderTotal = ROUND(orderTotal);
    SET pointsToAdd = FLOOR(orderTotal * 2);  -- Assuming 2 point per £1 spent

    -- Step 4: Add points to the customer's Clubcard
    UPDATE `grocerystoredb`.`clubcard`
    SET `Points_Balance` = currentPoints + pointsToAdd,
        `Last_Updated` = CURRENT_TIMESTAMP
    WHERE `Card_ID` = cardId;

    -- Step 5: Record the points transaction
    INSERT INTO `grocerystoredb`.`pointstransaction` (`Card_ID`, `Transaction_Type`, `Points_Changed`, `Transaction_Date`)
    VALUES (cardId, 'Earned', pointsToAdd, CURRENT_TIMESTAMP);

    -- Step 6: Update the order to reflect points awarded
    UPDATE `grocerystoredb`.`order`
    SET `Points_Awarded` = pointsToAdd
    WHERE `Order_ID` = orderId;

    -- If all steps are successful, commit the transaction
    COMMIT;

    -- Optionally, return a success message
    SELECT 'Points added successfully!' AS Status;
END //

DELIMITER ;



CALL AddClubcardPoints(123); -- where 123 is the Order_ID


ALTER TABLE grocerystoredb.order
ADD COLUMN `Status` ENUM('Pending', 'Complete') DEFAULT 'Pending';
DELIMITER //

CREATE TRIGGER AfterOrderUpdate
AFTER UPDATE ON grocerystoredb.order
FOR EACH ROW
BEGIN
    -- Trigger only when the Status is set to 'Complete' and the Customer_ID is in the clubcard table
    IF NEW.Status = 'Complete' AND OLD.Status != 'Complete' THEN
        -- Ensure the customer is in the loyalty program
        IF (SELECT COUNT(*) 
            FROM grocerystoredb.clubcard 
            WHERE Customer_ID = NEW.Customer_ID) > 0 THEN

            -- Check if the order has already been processed for points
            IF (SELECT COUNT(*) 
                FROM grocerystoredb.order_points_awarded 
                WHERE Order_ID = NEW.Order_ID) = 0 THEN

                -- Calculate points to add (2 points per £1 spent)
                SET @pointsToAdd = FLOOR(NEW.Total_Amount * 2);

                -- Update the customer's Clubcard points balance
                UPDATE grocerystoredb.clubcard
                SET Points_Balance = Points_Balance + @pointsToAdd
                WHERE Customer_ID = NEW.Customer_ID;

                -- Log the transaction in PointsTransaction table
                INSERT INTO grocerystoredb.pointstransaction (Card_ID, Transaction_Type, Points_Changed, Transaction_Date)
                SELECT Card_ID, 'Earned', @pointsToAdd, NOW()
                FROM grocerystoredb.clubcard
                WHERE Customer_ID = NEW.Customer_ID;

                -- Mark the order as processed in the tracking table
                INSERT INTO grocerystoredb.order_points_awarded (Order_ID)
                VALUES (NEW.Order_ID);
            END IF;
        END IF;
    END IF;
END //

DELIMITER ;







