-- Procedure to add points to a customer's Clubcard based on the order total
DELIMITER //

CREATE PROCEDURE AddClubcardPoints(IN orderId INT)
BEGIN
    DECLARE customerId INT;
    DECLARE cardId INT;
    DECLARE orderTotal DECIMAL(10,2);
    DECLARE pointsToAdd INT;
    DECLARE currentPoints INT;

    -- Declare an exit handler for any unexpected SQL errors
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- If an error occurs, rollback the transaction
        ROLLBACK;
        -- Optionally, return an error message or take other actions
        SELECT 'An error occurred, transaction rolled back.' AS ErrorMessage;
    END;

    -- Start the transaction
    START TRANSACTION;

    -- Step 1: Get the order details
    SELECT `Customer_ID`, `Total_Amount` INTO customerId, orderTotal
    FROM `grocerystoredb`.`order`
    WHERE `Order_ID` = orderId;

    -- Step 2: Get the customer's Clubcard ID and current points balance
    SELECT `Card_ID`, `Points_Balance` INTO cardId, currentPoints
    FROM `grocerystoredb`.`clubcard`
    WHERE `Customer_ID` = customerId;

    -- Step 3: Calculate points to add based on the fixed policy (2 point per £1 spent)
    SET orderTotal = ROUND(orderTotal);
    SET pointsToAdd = FLOOR(orderTotal * 2);  -- Assuming 2 point per £1 spent

    -- Step 4: Add points to the customer's Clubcard
    UPDATE `grocerystoredb`.`clubcard`
    SET `Points_Balance` = currentPoints + pointsToAdd,
        `Last_Updated` = CURRENT_TIMESTAMP
    WHERE `Card_ID` = cardId;

    -- Step 5: Record the points transaction
    INSERT INTO `grocerystoredb`.`pointstransaction` (`Card_ID`, `Transaction_Type`, `Points_Changed`, `Transaction_Date`)
    VALUES (cardId, 'Earned', pointsToAdd, CURRENT_TIMESTAMP);

    -- Step 6: Update the order to reflect points awarded
    UPDATE `grocerystoredb`.`order`
    SET `Points_Awarded` = pointsToAdd
    WHERE `Order_ID` = orderId;

    -- If all steps are successful, commit the transaction
    COMMIT;

    -- Optionally, return a success message
    SELECT 'Points added successfully!' AS Status;
END //

DELIMITER ;


ALTER TABLE grocerystoredb.order
ADD COLUMN Points_Awarded BOOLEAN DEFAULT FALSE;

DELIMITER //

CREATE TRIGGER AfterOrderUpdate
AFTER UPDATE ON grocerystoredb.order
FOR EACH ROW
BEGIN
    -- Check if points have not already been awarded
    IF NEW.Points_Awarded = FALSE THEN
        -- Calculate points based on the Total_Amount
        DECLARE pointsToAdd INT;
        SET pointsToAdd = FLOOR(NEW.Total_Amount * 2);  -- 2 points per £1 spent

        -- Update the customer's Clubcard points balance
        UPDATE grocerystoredb.clubcard
        SET Points_Balance = Points_Balance + pointsToAdd
        WHERE Customer_ID = NEW.Customer_ID;

        -- Log the transaction in PointsTransaction table
        INSERT INTO grocerystoredb.pointstransaction (Card_ID, Transaction_Type, Points_Changed, Transaction_Date)
        SELECT Card_ID, 'Earned', pointsToAdd, NOW()
        FROM grocerystoredb.clubcard
        WHERE Customer_ID = NEW.Customer_ID;

        -- Mark points as awarded
        UPDATE grocerystoredb.order
        SET Points_Awarded = TRUE
        WHERE Order_ID = NEW.Order_ID;
    END IF;
END //

DELIMITER ;

