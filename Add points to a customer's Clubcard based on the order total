
DELIMITER //

CREATE PROCEDURE AddClubcardPoints(IN orderId INT, IN customerId INT)
BEGIN
    DECLARE cardId INT;
    DECLARE orderTotal DECIMAL(10,2);
    DECLARE pointsToAdd INT;
    DECLARE currentPoints INT;

    -- Declare an exit handler for any unexpected SQL errors
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- If an error occurs, rollback the transaction
        ROLLBACK;
        -- Optionally, return an error message or take other actions
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'An error occurred, transaction rolled back.';
    END;

    -- Start the transaction
    START TRANSACTION;

    -- Step 1: Get the order details (excluding the customer ID)
    SELECT `Total_Amount` INTO orderTotal
    FROM `grocerystoredb`.`order`
    WHERE `Order_ID` = orderId;

    -- Step 2: Get the customer's Clubcard ID and current points balance
    SELECT `Card_ID`, `Points_Balance` INTO cardId, currentPoints
    FROM `grocerystoredb`.`clubcard`
    WHERE `Customer_ID` = customerId;

    -- Step 3: Calculate points to add based on the fixed policy (2 points per £1 spent)
    SET orderTotal = ROUND(orderTotal);
    SET pointsToAdd = orderTotal * 2;  -- Assuming 2 points per £1 spent

    -- Step 4: Add points to the customer's Clubcard
    UPDATE `grocerystoredb`.`clubcard`
    SET `Points_Balance` = currentPoints + pointsToAdd,
        `Last_Updated` = CURRENT_TIMESTAMP
    WHERE `Card_ID` = cardId;

    -- Step 5: Record the points transaction
    INSERT INTO `grocerystoredb`.`pointstransaction` (`Card_ID`, `Transaction_Type`, `Points_Changed`, `Transaction_Date`)
    VALUES (cardId, 'Earned', pointsToAdd, CURRENT_TIMESTAMP);

    -- If all steps are successful, commit the transaction
    COMMIT;
END //

DELIMITER ;

-- Example call to the procedure
CALL AddClubcardPoints(123, 456);  -- where 123 is the Order_ID and 456 is the Customer_ID
